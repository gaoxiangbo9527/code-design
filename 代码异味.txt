这里的内容不是单针对于 OO 的。

内容组成
    《重构》 第3章
        没有整理，直接参考该章节即可
    《Clean Code》 第17章
        这里没有列出，见 PHP Best Practice 中 Clean Code 的笔记
    《深入 PHP》 第6章
        见下文

《深入 PHP》 第6章
    代码重复
        典型症状
            改一个地方，其他很多地方也要跟着改
        缺点
            紧耦合，可维护性差，可扩展性差
        解决方案
            很多原则和模式都是用来消除重复的，根据情况找出合适的那个即可。

    条件语句
        典型症状
            在类中频繁的使用相同结构的条件语句，特别是多个方法中都出现了相同结构的条件语句。其实这算是一种特殊的代码重复。
        缺点
            代码重复。
            从而导致可复用性、可读性、可维护性、可扩展性都差。
        解决方案
            多态。

            把该类拆分成一个抽象基类和多个子类，在抽象基类中定义公共的接口，然后多个子类去实现这些公共接口，这就是多态的含义。
            往往在抽象基类中有一个静态的工厂方法，其中放置着该条件语句，并且把所需类型的对象返回给客户端代码，供客户端代码使用。
            注意，这并没有把条件语句完全干掉，但利用多态把条件语句集中到了一处，消除了重复。

            其实这也涉及到了抽象和继承。
        参考内容
            深入PHP：6.4
            代码整洁之道：3.4

    类知道的太多
        典型症状
            使用全局变量
            火车失事用法
            对某个模块的简单改动会传遍系统中的一些无关模块
            开发者害怕改动，因为他们不清楚哪些代码可能会受影响
        缺点
            依赖太多，造成紧耦合。
            从而导致可复用性、可维护性差。
        解决方案
            封装。
            最少知识原则（得墨忒耳定律）。
        参考内容
            代码整洁之道：6.3
            Head First 设计模式：265 页
            程序员修炼之道：112 页

    万能的类
        典型症状
            类名不精确或者很难取
            无法用大概 25 个单词简要描述一个类，且不用 if（如果）、and（和、还）、or（或） 或 but（但） 等词汇。
            类看起来很乱很长，实例变量和方法都非常多
        缺点
            职责不单一
        解决方案
            单一职责原则。
            高内聚。

            将类的大函数拆分为小函数；为了减少小函数的参数，需要将参数提升为类的实体变量；类的实体变量一多，内聚性就在下降；为了保持内聚性，可以
            将部分函数以及这些函数所共享的实体变量独立出来；这样，大类就被拆分成了许多高内聚的、职责单一的类。
        参考内容
            代码整洁之道：10.2
