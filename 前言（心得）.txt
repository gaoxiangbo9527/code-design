用户的 需求 转化为产品人员的 目标
产品人员的 目标 需要开发人员的 代码
开发人员的 代码 实现了用户的 需求
（用户）需求、（产品人员）目标和（开发人员）代码形成了一种三角关系的循环。

需求 变化 会导致 目标 变化
目标 变化 会导致 代码 变化
最终是 变化 在驱动着这个循环的轮转

代码 变化 即 增删改查 代码
  增
    新增
  删
    删除
  改
    修改
  查
    查看
  
  读指的就是查看，维护指的是修改和删除，扩展指的是新增和删除，所以：
    可读性
      查
    可维护性
      改
      删
    可扩展性
      增
      删
  
  现实中很少只去删除，而别的什么也不做。往往是在修改和新增时，会顺带着删除，所以删除的重要性最低，甚至很多时候在讨论增删
  改查时会被忽略掉。
  很多开人人员认为增删改查的重要顺序应该为：
    增 > 改 > 查 > 删
  它们认为最主要的精力要花在新增功能上，其次在修改功能上，最后才是增强可读性上。对于功能很少、可一次性完成、又不需要后续
  维护的项目来说，这个顺序是对的。但现实中这样的项目非常少，所以对于大多数项目来说这种观点是错误的，正确的顺序应该是：
    查 > 改 > 增 > 删
  这是因为：  
    新增和修改都要先查看，所以提高可读性也会提高可维护性和可扩展性，从而增加生产效率。可读性总是被忽略，应引起重视。
    很多项目都证明了花在维护（修改）上的时间远比花在扩展（新增）上的时间多，所以可维护性（修改）往往比可扩展性（新增）更
    重要。
    上面都是经验之谈，虽然不具备绝对适用性，但具有普遍适用性。
    
开发人员想让 代码 变化 跟上 目标 变化
  就要提高可读性、可维护性和可扩展性，而本质上最大的敌人其实是 重复 。重复的代码到处都是，读不好读、改不好改，增不好增。
  所以降低重复，即提高 可复用性 也非常重要的。
  提高可读性、可维护性、可扩展性和可复用性即是代码设计的四个目标，但它们也只是目标而已，并没有具体告诉我们该怎么做。要注
  意它们即适用于面向对象编程，也适用于面向过程编程。
  为了实现这四个目标，对于面向对象编程而言，我们要先借助编程语言的语法去实现面向对象的四个基本特征：抽象、封装、继承和多
  态。但单靠这四个基本特征还不够，所以又总结出了很多的设计原则、设计模式和实践。它们综合起来，就告诉了我们具体该做什么，
  也是我们要去学习的重点。即：
    面向对象的四个基本特征
    面向对象的设计原则
    面向对象的设计模式
    面向对象的实践
  在去学习它们的时候，别忘了回顾一下，它们是怎么反馈到这四个目标上的。