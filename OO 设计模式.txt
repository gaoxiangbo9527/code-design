创建型
    简单工厂
        如果有一个类，一般只包含一个方法，该方法包含为某个类家族创建对象的逻辑，那么这个类就称为简单工厂。

        严格来说并不算是一种设计模式，反而比较像是一种编程习惯。
        简单工厂的好处是，封装了可能会变化的部分（要创建的对象可能会增减），也可能会消除重复（可能有很多地方需要包含相同的创建逻辑）。

        简单工厂本身不是很强大，但是通过组合，可以把创建对象的任务委托给工厂对象。这时简单工厂已经非常接近策略模式了，如果真的需要切换简单工
        厂的对象，那其实就已经是策略模式了，只不过“算法”是用于创建对象的。

        简单工厂可以通过继承来扩展创建方法的行为，也方便实现测试替身，这些都是静态工厂做不到的，所以尽量不要用静态工厂。

    静态工厂
        基本上就是“静态版”的简单工厂。和简单工厂的用途很类似。严格来说并不算是一种设计模式。

        静态工厂相对于简单工厂，唯一的好处就是不用实例化，但是缺点更多，所以尽量不要用静态工厂。

    工厂方法模式
        定义了一个创建对象的接口，但 由子类决定 要实例化的类是哪一个。工厂方法让类把实例化推迟到子类。

        由子类做决定 这是工厂方法模式的核心，也是和其它创建型模式的最大的区别。

        如果工厂方法有指定参数，根据传入的参数的不同会创建不同的对象，这叫做“参数化工厂方法”。

    抽象工厂模式
        提供一个接口，用于创建相关或依赖对象的家族，而不需要明确指定具体类。

        抽象工厂经常以工厂方法的方式实现。经常是抽象工厂（抽象类或接口）中定义一个家族的工厂方法，然后每个工厂方法对应着一类产品。

    单例模式
        确保一个类只有一个实例，并提供一个全局访问点。
        被认为是一种反模式，违反了很多原则，比如单一责任原则。

        现在，更多人使用类和静态方法来提供全局访问，比如说 Logger 类或者 Db 类。但只要是全局访问，本质上都是一样的，会绕过接口签名形成不好
        发现的依赖，测试也不好写。不管是用什么方式实现的全局访问，都要尽量不用，应考虑使用依赖注入。

结构型
    装饰者模式
        动态地将责任附加到对象上。若要扩展功能，装饰者提供了比继承更有弹性的替代方案。

行为型
    策略模式
        定义算法族，分别封装起来，让它们之间可以互相替换，此模式让算法的变化独立于使用算法的客户。

    观察者模式
        定义了对象之间的一对多依赖，这样一来，当一个对象改变状态时，它的所有依赖者都会收到通知并自动更新。





模式
    原型模式
    命令模式
    适配器模式
    外观模式
    模板方法模式
    迭代器模式
    组合模式
    状态模式
    代理模式
    解释器模式
    访问者模式
    依赖注入模式
    注册模式
        和单例模式一样，全局问题带来的后果也比较严重，建议使用依赖注入模式。
反模式
    服务定位器模式
        隐藏了依赖关系，即依赖关系没有在方法签名中体现。违反了依赖倒置原则。
        可以考虑使用依赖注入（容器）替换掉服务定位器模式。

待研究的模式
    建造者模式
    桥接模式
    享元模式
    职责链模式
    中介者模式

    空对象模式
    MVC 模式
