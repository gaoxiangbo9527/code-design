封装变化
  找出应用中可能会变化的部分，把它们独立出来或者说封装起来，不要和那些不需要变化的部分混在一起。
  这样将来只需要改动此部分，而不会影响那些不需要变化的其他部分。系统的可维护性和扩展性会得到提高。

不要重复你自己（Don’t repeat yourself，DRY）

3.多用组合，少用继承。
相对于继承，组合的弹性或者说可扩展性更好。

4.为交互对象之间的松耦合设计而努力。

5.开放-关闭原则：类应该对扩展开放，对修改关闭。
也就是要在不修改类代码的情况下扩展它。





8.好莱坞原则：别调用（打电话给）我们，我们会调用（打电话给）你。

单一责任原则（Single Responsibility Principle，SRP）
  有时也称 单一权责原则 。
  一个类应该只有一个引起变化的原因。即尽量要让每个类保持单一责任。
  
最少知识原则
  正式名称为 得墨忒耳定律 。通俗来说，也叫只和你的密友谈话。
  
依赖倒置原则（Dependency Inversion Principle，DIP）
  要依赖抽象，不要依赖具体。
  不能让高层组件依赖底层组件，而且不管是高层还是底层组件，两者都应该依赖于抽象。
  

  
  
里氏替换原则（Liskov Substitution Principle，LSP）
  所有引用基类（父类）的地方必须能透明地使用其子类的对象
  
  
针对接口编程，而不是针对实现编程
  针对接口编程实际上指的是针对抽象编程，既“针对超类型编程”，所以这里所说的“接口”从语法上来讲可以是接口或者抽象类。
  和依赖倒置原则几乎是一个意思。