面向对象和面向过程是对立的，但没有谁更优秀，要视情况使用
    对象把数据隐藏在抽象之后，暴露操作数据的函数。数据结构暴露其数据，没有提供有意义的函数。
    这里的对象和数据结构其实分别代表着面向对象编程和面向过程编程。

    它们是截然对立的：
        面向过程编程便于在不改动既有数据结构的前提下添加新函数，面向对象编程便于在不改动既有函数的前提下添加新类。
        面向过程编程难以添加新数据结构，因为必须修改所有的函数。面向对象编程难以添加新函数，因为必须修改所有的类。
        对于面向对象编程较难的事，对于面向过程编程却较容易，反之亦然。

    在任何一个复杂的系统中，都会有需要添加新数据类型而不是新函数的时候。这时，对象和面向对象编程就比较合适。另一方面，也会有想要添加新函数而
    不是数据结构的时候。在这种情况下，数据结构和面向过程编程更合适。我们应该不带成见的了解情形，并根据手边的工作性质选择其中一种手段。所以说
    面向对象编程优于面向过程编程是不正确的，一切都是对象只是一个传说。

    这部分内容和观点主要来自于《Clean Code》 6.2 节

面向对象编和面向过程的区别
    认为面向对象和面向过程的区别是，面向对象的代码中有对象。这是不对的。我们经常看到面向过程的代码在使用对象或面向对象的类中包含面向过程的代
    码。有对象并不意味着一定就是面向对象设计。

    面向过程强调的是一件事“该怎么做“，其核心代码往往是一种自顶向下的、逻辑思维严密的流程控制语句，根据不同的情况去调用不同的命令（函数）。很
    容易出现嵌套、重复以及依赖关系。类似于树，移动一个节点，其后代节点都要跟着移动。

    面向对象强调的是一件事“该让谁来做”，把责任分配给各个对象，通过它们互相配合来完成任务。类似于图，一个节点发生变化，只会影响挨着的几个节点，
    不会影响那些没挨着的节点。

该怎么选？
    我们的目的是写出可读性高、可维护性高、可扩展性高和可复用性高的的代码，这种代码一般都有高内聚、松耦合和正交几个特点。对于大型项目而言，面向
    对象编程 更容易 做到这几点。这已经被很多大型的项目所证明，无需质疑。

    对于大型项目而言，大部分需求更适合用面向对象，小部分需求更适合用面向过程，可以按情况配合使用，但绝对不可以在一个类中混着用这两种编程方式。
