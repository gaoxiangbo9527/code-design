用户 的 需求 转化为 产品 的 目标；
产品 的 目标 需要 开发 的 代码；
开发 的 代码 实现了 用户 的 需求；
（用户）需求、（产品）目标和（开发）代码形成了一种三角循环关系。

需求 变化 会导致 目标 变化
目标 变化 会导致 代码 变化
最终是 变化 在驱动着这个循环的轮转。

代码上的行为其实就只有写代码和读代码两种，而写代码又可以细分为新增代码、修改代码和删除代码，所以总的来说，代码上的行为就是 增删改查 代码：
    写
        增（新增）
        删（删除）
        改（修改）
    读
        查（查看）

    读指的就是查看，维护指的是修改和删除，扩展指的是新增和删除，所以：
        可读性
            查
        可维护性
            改
            删
        可扩展性
            增
            删

    现实中很少只去删除，而别的什么也不做。往往是在修改和新增的同时，会顺带着删除，所以删除的重要性最低，甚至很多时候在讨论增删改查代码时会被忽略掉。
    很多开人人员认为增删改查的重要顺序应该为：
        增 > 改 > 查 > 删
    他们认为最主要的精力要花在新增功能上，其次在修改功能上，最后才是增强可读性上。最后往往因为时间原因，从来就没花时间去增强可读性。对于功能很少、
    可一次成型、又不需要后续维护和扩展的项目来说，这个顺序是合理的。但现实中这样的项目十分罕见，所以对于大多数项目来说其实正确的顺序应该是：
        查 > 改 > 增 > 删
    这是因为：
        新增和修改都要先查看代码，代码可读性差，到处找来找去，新增和修改也就很慢。所以提高可读性也会提高可维护性和可扩展性，从而增加生产效率。可读
        性总是被忽略，应引起重视。
        很多项目都证明了花在维护（修改）上的时间远比花在扩展（新增）上的时间多，二者甚至会相差 10 倍，所以可维护性（修改）往往比可扩展性（新增）
        更重要。
        上面都是经验之谈，虽然不具有绝对适用性，但具有普遍适用性。

开发人员想让 代码变化 跟上 目标变化
    为了跟上 变化 ，就要提高可读性、可维护性和可扩展性，而本质上最大的敌人其实是 重复 。重复的代码到处都是，读不好读、改不好改，增不好增。所以降低
    重复，即提高 可复用性 也非常重要的。
    提高可读性、可维护性、可扩展性和可复用性即代码设计的四个目标。要注意它们即适用于面向对象编程，也适用于面向过程编程。但它们也只是目标而已，并没
    有具体告诉我们该怎么做。
    为了实现这四个目标，对于面向对象编程而言，我们要先借助编程语言提供的语法去实现面向对象的四个基本特征：抽象、封装、继承和多态。但单靠这四个基本
    特征还不够，所以又总结出了很多的面向对象设计原则和设计模式以及最佳实践。它们综合起来告诉了我们具体该做什么，也是我们要去学习的重点。即：
        面向对象的四个基本特征
        面向对象的设计原则
        面向对象的设计模式
        最佳实践
    在去学习它们的时候，别忘了回顾一下，它们是怎么反馈到这四个目标上的。

关键字：变化 和 重复 。
